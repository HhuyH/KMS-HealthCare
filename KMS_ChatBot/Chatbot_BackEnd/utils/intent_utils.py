
import openai
import unidecode
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c cha v√†o sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from prompts.db_schema.load_schema import user_core_schema, schema_modules
from prompts.prompts import build_system_prompt
from utils.symptom_session import get_symptoms_from_session
from config import MODEL

from prompts.prompts import system_prompt_sql
from utils.openai_client import chat_completion, chat_stream

def normalize_text(text: str) -> str:
    return unidecode.unidecode(text).lower().strip()

def is_confirmation(text):
        norm = normalize_text(text)
        return norm in {"dung roi", "uh", "um", "dung", "ƒë√∫ng r·ªìi", "v√¢ng", "ph·∫£i", "·ª´"}

def get_combined_schema_for_intent(intent: str) -> str:
    schema_parts = [user_core_schema]  # lu√¥n load ph·∫ßn l√µi
    intent = normalize_text(intent)  # chu·∫©n h√≥a kh√¥ng d·∫•u, lowercase

    # Map nh√≥m t·ª´ kh√≥a t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng module
    keyword_map = {
        'user_profile': [
            'ƒë·ªãa ch·ªâ', 'h·ªç t√™n', 'li√™n h·ªá', 's·ªë ƒëi·ªán tho·∫°i', 'email', 'kh√°ch', 'th√¥ng tin ng∆∞·ªùi d√πng'
        ],
        'medical_history': [
            'disease', 'symptom', 'tri·ªáu ch·ª©ng', 'b·ªánh', 'ƒëau', 's·ªët', 'm·ªát', 'kh√≥ th·ªü',
            'ch√≥ng m·∫∑t', 'ƒëau b·ª•ng', 'c·∫£m gi√°c', 'kh√¥ng kh·ªèe', 'c·∫£m th·∫•y'
        ],
        'products': [
            'prescription', 'medication', 'thu·ªëc', 's·∫£n ph·∫©m', 'c√≤n h√†ng'
        ],
        'appointments': [
            'appointment', 'l·ªãch h·∫πn', 'kh√°m b·ªánh'
        ],
        'ai_prediction': [
            'ai', 'prediction', 'd·ª± ƒëo√°n', 'chatbot'
        ],
        'orders': [
            'order', 'payment', 'ƒë∆°n h√†ng', 'thanh to√°n'
        ],
        'notifications': [
            'notification', 'th√¥ng b√°o'
        ],
        'services': [
            'service', 'g√≥i kh√°m', 'd·ªãch v·ª•', 'g√≥i'
        ],
    }

    keyword_map_norm = {
        k: [normalize_text(word) for word in v]
        for k, v in keyword_map.items()
    }

    extra_intent_map = {
        'prescription_products': [
            'prescription_products','Cho m√¨nh th√¥ng tin thu·ªëc theo ƒë∆°n...', 'M√¨nh c·∫ßn nh·ªØng l·ªói thu·ªëc n√†o...','thu·ªëc theo ƒë∆°n', 'lo·∫°i thu·ªëc n√†o', 'thu·ªëc ƒë∆∞·ª£c k√™', 'k√™ ƒë∆°n', 'toa thu·ªëc'
        ],
        'order_items_details' :[
            'order_items', 'order_details','cho m√¨nh th√¥ng tin chi ti·∫øt c·ªßa s·∫£n ph·∫©m...','s·∫£n ph·∫£m... s·ª≠ d·ª•ng th·∫ø n√†o','chi ti·∫øt ƒë∆°n h√†ng', 's·∫£n ph·∫©m trong ƒë∆°n', 's·∫£n ph·∫©m ƒë·∫∑t mua', 'h√≥a ƒë∆°n', 'mua s·∫£n ph·∫©m', 's·ª≠ d·ª•ng s·∫£n ph·∫©m'
        ],
    }

    extra_intent_map_norm = {
        k: [normalize_text(word) for word in v]
        for k, v in extra_intent_map.items()
    }

    # Duy·ªát t·∫•t c·∫£ keyword theo module
    for module_name, keywords in keyword_map_norm.items():
        if any(kw in intent for kw in keywords):
            if module_name in schema_modules:
                if schema_modules[module_name] not in schema_parts:
                    schema_parts.append(schema_modules[module_name])

    # B·∫Øt bu·ªôc th√™m doctor_clinic n·∫øu c√≥ l·ªãch h·∫πn
    if any(kw in intent for kw in keyword_map_norm['appointments']):
        if schema_modules['doctor_clinic'] not in schema_parts:
            schema_parts.append(schema_modules['doctor_clinic'])
        if schema_modules['user_profile'] not in schema_parts:
            schema_parts.append(schema_modules['user_profile']) # li√™n quan ƒë·∫øn user_id & guest_id

    # n·∫øu ng∆∞·ªùi h·ªèi h·ªèi nh·ªØng lo·∫°i thu·ªëc n√†o ƒëi k√®m theo ƒë∆°n thu·ªëc th√¨ s·∫Ω g·ªçi c·∫£ 2 products v√† prescription ƒë·ªÉ l·∫•y th√¥ng tin thu·ªëc
    if any(kw in intent for kw in extra_intent_map_norm['prescription_products']):
        schema_parts.append(schema_modules['products'])
        schema_parts.append(schema_modules['appointments'])

    # l·∫•y th√¥ng tin chi ti·∫øt c·ªßa s·∫£n ph·∫©m theo h√≥a ƒë∆°n
    if any(kw in intent for kw in extra_intent_map_norm['order_items_details']):
        schema_parts.append(schema_modules['products'])
        schema_parts.append(schema_modules['orders'])

    # X·ª≠ l√Ω ƒë·∫∑c bi·ªát theo t√™n b·∫£ng r√µ r√†ng (table-level)
    if 'prediction_diseases' in intent:
        schema_parts.append(schema_modules['ai_prediction'])
        schema_parts.append(schema_modules['medical_history'])
        schema_parts.append(schema_modules['user_profile'])


    # Lo·∫°i b·ªè tr√πng l·∫∑p n·∫øu c√≥
    schema_parts = list(dict.fromkeys(schema_parts))

    return '\n'.join(schema_parts)

VALID_INTENTS = [
    "user_profile",
    "medical_history",
    "products",
    "appointments",
    "ai_prediction",
    "orders",
    "notifications",
    "services",
    "prescription_products",
    "order_items_details",
    "health_query",
    "general_chat",
    "product_query",
    "final_diagnosis"
]

INTENT_MAPPING = {
    # ü©∫ Truy v·∫•n li√™n quan ƒë·∫øn s·ª©c kh·ªèe / tri·ªáu ch·ª©ng
    "medical_history": "symptom_query",
    "ai_prediction": "symptom_query",
    "appointments": "symptom_query",
    "prescription_products": "symptom_query",
    "health_query": "symptom_query",  # gi·ªØ l·∫°i alias g·ªëc
    "final_diagnosis": "symptom_query",

    # üì¶ Truy v·∫•n s·∫£n ph·∫©m, ƒë∆°n h√†ng, h·ªì s∆°
    "products": "product_query",
    "order_items_details": "product_query",
    "orders": "product_query",
    "user_profile": "user_query",  # T√°ch ri√™ng user cho d·ªÖ hi·ªÉu
    "services": "product_query",

    # üí¨ Tr√≤ chuy·ªán chung / ph·∫£n h·ªìi ph·ª•
    "notifications": "general_chat",
}


# Danh s√°ch t·ª´ kh√≥a nh√¢n di·ªán d·∫°ng intent

# T·ª´ kh√≥a li√™n quan ƒë·∫øn v·∫•n ƒë·ªÅ y t·∫ø
symptom_keywords = [
    "ƒëau", "s·ªët", "ho", "kh√≥ th·ªü", "n√¥n", "bu·ªìn n√¥n", "ch√≥ng m·∫∑t", "nh·ª©c ƒë·∫ßu", 
    "ti√™u ch·∫£y", "m·ªát", "kh√≥ ch·ªãu", "c·∫£m", "ng·ª©a", "ph√°t ban", "ƒëau h·ªçng", "hoa m·∫Øt", 
    "ƒë·∫ßy b·ª•ng", "kh√≥ ng·ªß", "kh√≥ ti√™u", "ƒëau ng·ª±c", "ch·∫£y m√°u", "m·∫•t ng·ªß"
]
        
# T·ª´ kh√≥a li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng ‚Üí user_query
user_keywords = [
    "user_id", "id nguoi dung", "ten dang nhap", "tai khoan", "username",
    "email", "dia chi email", "dia chi mail", "so dien thoai", "sdt",
    "vai tro", "role", "id", "thong tin nguoi dung", "thong tin user",
    "lay thong tin", "lay du lieu", "nguoi dung la ai", "lay tai khoan",
    "lay danh sach nguoi dung", "hien thong tin nguoi dung",
    "thong tin ve user", "co bao nhieu user", "co bao nhieu nguoi dung",
    "liet ke nguoi dung"
]

# T·ª´ kh√≥a li√™n quan ƒë·∫øn s·∫£n ph·∫©m / ƒë∆°n h√†ng / d·ªãch v·ª• ‚Üí product_query
product_keywords = [
    "don hang", "san pham", "dat mua", "gia tien", "thuoc", "toa thuoc",
    "hoa don", "dat lich", "goi kham", "dich vu", "goi", "ma don", "ten san pham",
    "xem san pham", "lich su mua", "chi tiet don hang", "thuoc nao", "ban duoc khong"
]

# T·ª´ kh√≥a k·ªπ thu·∫≠t li√™n quan SQL ‚Üí c√≥ th·ªÉ d√πng cho c·∫£ 2 ho·∫∑c t√πy logic
sql_keywords = [
    "select", "query", "from", "where", "join", "limit"
]



async def detect_intent(user_message: str, session_key: str = None, last_intent: str = None) -> str:
    prompt = (
        "X√°c ƒë·ªãnh intent ch√≠nh c·ªßa c√¢u sau trong c√°c lo·∫°i:\n"
        + ", ".join(VALID_INTENTS) +
        f"\nC√¢u: {user_message}\nIntent:"
    )

    try:
        # N·∫øu user x√°c nh·∫≠n v√† tr∆∞·ªõc ƒë√≥ h·ªèi tri·ªáu ch·ª©ng ‚Üí gi·ªØ nguy√™n intent
        if is_confirmation(user_message) and last_intent == "symptom_query":
            print("üîÅ User x√°c nh·∫≠n tri·ªáu ch·ª©ng ‚Üí Gi·ªØ intent l√† 'symptom_query'")
            return "symptom_query"

        # G·ªçi GPT ƒë·ªÉ ph√¢n lo·∫°i intent
        response = chat_completion(
            [{"role": "user", "content": prompt}],
            max_tokens=10,
            temperature=0
        )
        raw_intent = response.choices[0].message.content.strip()
        raw_intent = raw_intent.replace("intent:", "").replace("Intent:", "").strip().lower()

        # N·∫øu GPT tr·∫£ sai ƒë·ªãnh d·∫°ng
        if "intent ch√≠nh c·ªßa c√¢u" in raw_intent:
            print("‚ö†Ô∏è GPT tr·∫£ sai format ‚Üí fallback x·ª≠ l√Ω theo rule-based")
            raw_intent = ""

        mapped_intent = INTENT_MAPPING.get(raw_intent, raw_intent)
        print(f"üß≠ GPT intent: {raw_intent} ‚Üí Pipeline intent: {mapped_intent}")

        # Normal h√≥a message ƒë·ªÉ check keyword
        normalized = normalize_text(user_message)

        # === RULE-BASED OVERRIDE ===
        if any(kw in normalized for kw in user_keywords):
            print("üîÅ Override intent ‚Üí 'user_query' do ph√°t hi·ªán keyword li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng")
            return "user_query"

        if any(kw in normalized for kw in product_keywords):
            print("üîÅ Override intent ‚Üí 'product_query' do ph√°t hi·ªán keyword li√™n quan s·∫£n ph·∫©m/d·ªãch v·ª•")
            return "product_query"

        if any(kw in normalized for kw in sql_keywords):
            print("üîÅ Override intent ‚Üí 'product_query' do ph√°t hi·ªán keyword k·ªπ thu·∫≠t SQL")
            return "product_query"

        # T·ª± ƒë·ªông nh·∫≠n bi·∫øt n·∫øu message ch·ª©a tri·ªáu ch·ª©ng
        def contains_symptom_keywords(text: str) -> bool:
            norm_text = normalize_text(text)
            return any(kw in norm_text for kw in symptom_keywords)

        if not raw_intent or mapped_intent not in VALID_INTENTS:
            if contains_symptom_keywords(user_message):
                print("ü©∫ Override intent ‚Üí 'symptom_query' do ph√°t hi·ªán tri·ªáu ch·ª©ng trong c√¢u")
                mapped_intent = "symptom_query"

        # Fallback gi·ªØ l·∫°i intent c≈© n·∫øu mapped ch∆∞a h·ª£p l·ªá
        if mapped_intent not in INTENT_MAPPING.values():
            if last_intent in INTENT_MAPPING:
                print(f"üîÅ Fallback gi·ªØ intent c≈© ‚Üí {last_intent}")
                return last_intent
            else:
                print("‚ùì Kh√¥ng detect ƒë∆∞·ª£c intent h·ª£p l·ªá ‚Üí Tr·∫£ v·ªÅ 'general_chat'")
                return "general_chat"
            
        if last_intent == "symptom_query" and len(user_message.strip().split()) <= 5:
            print("üîÅ C√¢u tr·∫£ l·ªùi ng·∫Øn v√† ƒëang follow-up ‚Üí gi·ªØ intent l√† 'symptom_query'")
            return "symptom_query"


        # Tr·∫£ v·ªÅ intent cu·ªëi c√πng sau x·ª≠ l√Ω
        print(f"üéØ Intent ph√°t hi·ªán cu·ªëi c√πng: {mapped_intent}")
        return mapped_intent

    except Exception as e:
        print("‚ùå L·ªói khi detect intent:", str(e))
        return "general_chat"

def get_sql_prompt_for_intent(intent: str) -> str:
    schema = get_combined_schema_for_intent(intent)
    return system_prompt_sql.replace("{schema}", schema)

# T·∫°o message h·ªá th·ªëng ho√†n ch·ªânh d·ª±a tr√™n intent,
# k·∫øt h·ª£p medical prompt v√† SQL prompt c√≥ ch√®n schema ph√π h·ª£p.
def build_system_message(intent: str, symptoms: list[str] = None) -> dict:
    sql_part = get_sql_prompt_for_intent(intent).strip()
    medical_part = build_system_prompt(intent, symptoms).strip()

    full_content = f"{medical_part}\n\n{sql_part}"

    return {
        "role": "system",
        "content": full_content
    }

async def should_trigger_diagnosis(user_message: str, collected_symptoms: list[dict]) -> bool:
    prompt = (
        "B·∫°n l√† tr·ª£ l√Ω y t·∫ø. H√£y x√°c ƒë·ªãnh ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ xong tri·ªáu ch·ª©ng ch∆∞a ƒë·ªÉ chuy·ªÉn sang b∆∞·ªõc ch·∫©n ƒëo√°n.\n"
        "Ch·ªâ tr·∫£ l·ªùi YES ho·∫∑c NO.\n\n"
        "V√≠ d·ª•:\n"
        "- Tri·ªáu ch·ª©ng: ['S·ªët', 'Ho']\n"
        "- Ng∆∞·ªùi d√πng: 'h·∫øt r·ªìi' ‚Üí YES\n"
        "- Ng∆∞·ªùi d√πng: 'kh√¥ng c√≥ g√¨ th√™m' ‚Üí YES\n"
        "- Ng∆∞·ªùi d√πng: 'c√≤n ƒëau b·ª•ng n·ªØa' ‚Üí NO\n"
        "- Ng∆∞·ªùi d√πng: '·ªù ƒë·ªÉ xem' ‚Üí NO\n\n"
        f"Tri·ªáu ch·ª©ng: {[s['name'] for s in collected_symptoms]}\n"
        f"Ng∆∞·ªùi d√πng: \"{user_message}\"\n\n"
        "Tr·∫£ l·ªùi: "
    )

    response = chat_completion(
        [{"role": "user", "content": prompt}],
        max_tokens=5,
        temperature=0
    )

    result = response.choices[0].message.content.strip().lower()
    return result.startswith("yes")



