
import openai
import unidecode
import sys
import os

# Th√™m ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c cha v√†o sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from prompts.db_schema.load_schema import user_core_schema, schema_modules
from prompts.prompts import build_system_prompt

from prompts.prompts import system_prompt_sql
from utils.openai_client import chat_completion
from utils.text_utils import normalize_text
from config.intents import VALID_INTENTS, INTENT_MAPPING

def is_confirmation(text):
        norm = normalize_text(text)
        return norm in {"dung roi", "uh", "um", "dung", "ƒë√∫ng r·ªìi", "v√¢ng", "ph·∫£i", "·ª´"}


def get_combined_schema_for_intent(intent: str) -> str:
    intent = normalize_text(intent)  # chu·∫©n h√≥a kh√¥ng d·∫•u, lowercase
    schema_parts = [user_core_schema]  # lu√¥n load ph·∫ßn l√µi

    keyword_map = {
        'user_profile': [
            "user", "ng∆∞·ªùi d√πng", "t√†i kho·∫£n", "username", "email", "vai tr√≤", "id ng∆∞·ªùi d√πng"
        ],
        'medical_history': [
            "b·ªánh", "disease", "ti·ªÅn s·ª≠", "symptom", "tri·ªáu ch·ª©ng", "b·ªánh n·ªÅn"
        ],
        'doctor_clinic': [
            "ph√≤ng kh√°m", "clinic", "b√°c sƒ©", "chuy√™n khoa", "l·ªãch kh√°m", "c∆° s·ªü y t·∫ø"
        ],
        'appointments': [
            "l·ªãch h·∫πn", "appointment", "kh√°m b·ªánh", "th·ªùi gian kh√°m", "ng√†y kh√°m"
        ],
        'ai_prediction': [
            "d·ª± ƒëo√°n", "ai", "ph√¢n t√≠ch s·ª©c kh·ªèe", "prediction", "chatbot"
        ],
        'products': [
            "s·∫£n ph·∫©m", "thu·ªëc", "toa thu·ªëc", "gi√° ti·ªÅn", "k√™ ƒë∆°n", "thu·ªëc n√†o"
        ],
        'orders': [
            "ƒë∆°n h√†ng", "thanh to√°n", "h√≥a ƒë∆°n", "order", "l·ªãch s·ª≠ mua", "mua h√†ng"
        ],
        'services': [
            "d·ªãch v·ª•", "g√≥i kh√°m", "li·ªáu tr√¨nh", "service", "g√≥i ƒëi·ªÅu tr·ªã"
        ],
        'notifications': [
            "th√¥ng b√°o", "notification", "tin nh·∫Øn h·ªá th·ªëng"
        ],
        'ai_diagnosis_result': [
            "ai ƒëo√°n", "ai t·ª´ng ch·∫©n ƒëo√°n", "ai d·ª± ƒëo√°n", "k·∫øt qu·∫£ ai", "b·ªánh ai ƒëo√°n", "ch·∫©n ƒëo√°n t·ª´ ai"
        ],
    }

    normalized_intent = normalize_text(intent)

    # D√≤ theo t·ª´ kh√≥a ƒë·ªÉ bi·∫øt schema n√†o c·∫ßn n·∫°p
    for module_key, keywords in keyword_map.items():
        if any(kw in normalized_intent for kw in keywords):
            schema = schema_modules.get(module_key)
            if schema and schema not in schema_parts:
                schema_parts.append(schema)

    # Lu·∫≠t ƒë·∫∑c bi·ªát: n·∫øu l√† l·ªãch h·∫πn, lu√¥n th√™m doctor_clinic v√† user
    if "appointment" in normalized_intent or "l·ªãch h·∫πn" in normalized_intent:
        for extra in ["doctor_clinic", "user_profile"]:
            schema = schema_modules.get(extra)
            if schema and schema not in schema_parts:
                schema_parts.append(schema)

    return "\n".join(schema_parts)

# Danh s√°ch t·ª´ kh√≥a nh√¢n di·ªán d·∫°ng intent
# T·ª´ kh√≥a li√™n quan ƒë·∫øn v·∫•n ƒë·ªÅ y t·∫ø
symptom_keywords = [
    "ƒëau", "s·ªët", "ho", "kh√≥ th·ªü", "n√¥n", "bu·ªìn n√¥n", "ch√≥ng m·∫∑t", "nh·ª©c ƒë·∫ßu", 
    "ti√™u ch·∫£y", "m·ªát", "kh√≥ ch·ªãu", "c·∫£m", "ng·ª©a", "ph√°t ban", "ƒëau h·ªçng", "hoa m·∫Øt", 
    "ƒë·∫ßy b·ª•ng", "kh√≥ ng·ªß", "kh√≥ ti√™u", "ƒëau ng·ª±c", "ch·∫£y m√°u", "m·∫•t ng·ªß"
]
        
async def detect_intent(user_message: str, session_key: str = None, last_intent: str = None) -> str:
    prompt = (
        "X√°c ƒë·ªãnh intent ch√≠nh c·ªßa c√¢u sau trong c√°c lo·∫°i:\n"
        + ", ".join(VALID_INTENTS) +
        f"\nC√¢u: {user_message}\nIntent:"
    )

    try:
        # N·∫øu user x√°c nh·∫≠n v√† tr∆∞·ªõc ƒë√≥ h·ªèi tri·ªáu ch·ª©ng ‚Üí gi·ªØ nguy√™n intent
        if is_confirmation(user_message) and last_intent == "symptom_query":
            print("üîÅ User x√°c nh·∫≠n tri·ªáu ch·ª©ng ‚Üí Gi·ªØ intent l√† 'symptom_query'")
            return "symptom_query"

        # G·ªçi GPT ƒë·ªÉ ph√¢n lo·∫°i intent
        response = chat_completion(
            [{"role": "user", "content": prompt}],
            max_tokens=10,
            temperature=0
        )
        raw_intent = response.choices[0].message.content.strip()
        raw_intent = raw_intent.replace("intent:", "").replace("Intent:", "").strip().lower()

        # N·∫øu GPT tr·∫£ sai ƒë·ªãnh d·∫°ng
        if "intent ch√≠nh c·ªßa c√¢u" in raw_intent:
            print("‚ö†Ô∏è GPT tr·∫£ sai format ‚Üí fallback x·ª≠ l√Ω theo rule-based")
            raw_intent = ""

        mapped_intent = INTENT_MAPPING.get(raw_intent, raw_intent)
        print(f"üß≠ GPT intent: {raw_intent} ‚Üí Pipeline intent: {mapped_intent}")

        # ‚úÖ N·∫øu intent h·ª£p l·ªá ‚Üí return lu√¥n, kh√¥ng x√©t override n·ªØa
        if mapped_intent in VALID_INTENTS:
            print(f"üéØ Intent ph√°t hi·ªán cu·ªëi c√πng: {mapped_intent}")
            return mapped_intent

        # T·ª± ƒë·ªông nh·∫≠n bi·∫øt n·∫øu message ch·ª©a tri·ªáu ch·ª©ng
        def gpt_detect_symptom_intent(user_message: str) -> bool:
            prompt = (
                "H√£y x√°c ƒë·ªãnh xem c√¢u sau c√≥ ph·∫£i l√† ng∆∞·ªùi d√πng ƒëang m√¥ t·∫£ tri·ªáu ch·ª©ng s·ª©c kh·ªèe kh√¥ng.\n"
                "Ch·ªâ tr·∫£ l·ªùi YES ho·∫∑c NO.\n\n"
                f"C√¢u: \"{user_message}\"\n"
                "Tr·∫£ l·ªùi: "
            )
            response = chat_completion(
                [{"role": "user", "content": prompt}],
                max_tokens=5,
                temperature=0
            )
            result = response.choices[0].message.content.strip().lower()
            return result.startswith("yes")


        if not raw_intent or mapped_intent not in VALID_INTENTS:
            if gpt_detect_symptom_intent(user_message):
                if last_intent in [None, "general_chat", "unknown"]:
                    print("ü©∫ Override intent ‚Üí 'symptom_query' do ph√°t hi·ªán tri·ªáu ch·ª©ng trong c√¢u")
                    return "symptom_query"

            
        # Fallback gi·ªØ l·∫°i intent c≈© n·∫øu mapped ch∆∞a h·ª£p l·ªá
        if mapped_intent not in INTENT_MAPPING.values():
            if last_intent in INTENT_MAPPING:
                print(f"üîÅ Fallback gi·ªØ intent c≈© ‚Üí {last_intent}")
                return last_intent
            else:
                print("‚ùì Kh√¥ng detect ƒë∆∞·ª£c intent h·ª£p l·ªá ‚Üí Tr·∫£ v·ªÅ 'general_chat'")
                return "general_chat"
            
        if last_intent == "symptom_query" and len(user_message.strip().split()) <= 5:
            print("üîÅ C√¢u tr·∫£ l·ªùi ng·∫Øn v√† ƒëang follow-up ‚Üí gi·ªØ intent l√† 'symptom_query'")
            return "symptom_query"


        # Tr·∫£ v·ªÅ intent cu·ªëi c√πng sau x·ª≠ l√Ω
        print(f"üéØ Intent ph√°t hi·ªán cu·ªëi c√πng: {mapped_intent}")
        return mapped_intent

    except Exception as e:
        print("‚ùå L·ªói khi detect intent:", str(e))
        return "general_chat"

def get_sql_prompt_for_intent(intent: str) -> str:
    schema = get_combined_schema_for_intent(intent)
    return system_prompt_sql.replace("{schema}", schema)

# T·∫°o message h·ªá th·ªëng ho√†n ch·ªânh d·ª±a tr√™n intent,
# k·∫øt h·ª£p medical prompt v√† SQL prompt c√≥ ch√®n schema ph√π h·ª£p.
def build_system_message(intent: str, symptoms: list[str] = None) -> dict:
    sql_part = get_sql_prompt_for_intent(intent).strip()
    medical_part = build_system_prompt(intent, symptoms).strip()

    full_content = f"{medical_part}\n\n{sql_part}"

    return {
        "role": "system",
        "content": full_content
    }

async def should_trigger_diagnosis(user_message: str, collected_symptoms: list[dict]) -> bool:
    prompt = (
        "B·∫°n l√† tr·ª£ l√Ω y t·∫ø. H√£y x√°c ƒë·ªãnh ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ xong tri·ªáu ch·ª©ng ch∆∞a ƒë·ªÉ chuy·ªÉn sang b∆∞·ªõc ch·∫©n ƒëo√°n.\n"
        "Ch·ªâ tr·∫£ l·ªùi YES ho·∫∑c NO.\n\n"
        "V√≠ d·ª•:\n"
        "- Tri·ªáu ch·ª©ng: ['S·ªët', 'Ho']\n"
        "- Ng∆∞·ªùi d√πng: 'h·∫øt r·ªìi' ‚Üí YES\n"
        "- Ng∆∞·ªùi d√πng: 'kh√¥ng c√≥ g√¨ th√™m' ‚Üí YES\n"
        "- Ng∆∞·ªùi d√πng: 'c√≤n ƒëau b·ª•ng n·ªØa' ‚Üí NO\n"
        "- Ng∆∞·ªùi d√πng: '·ªù ƒë·ªÉ xem' ‚Üí NO\n\n"
        f"Tri·ªáu ch·ª©ng: {[s['name'] for s in collected_symptoms]}\n"
        f"Ng∆∞·ªùi d√πng: \"{user_message}\"\n\n"
        "Tr·∫£ l·ªùi: "
    )

    response = chat_completion(
        [{"role": "user", "content": prompt}],
        max_tokens=5,
        temperature=0
    )

    result = response.choices[0].message.content.strip().lower()
    return result.startswith("yes")



