from utils.openai_utils import stream_gpt_tokens
from utils.openai_utils import chat_completion
from prompts.db_schema.load_schema import user_core_schema, schema_modules, load_schema

import logging
logger = logging.getLogger(__name__)
import re
import json

def extract_json(text: str) -> str:
    """Tr√≠ch JSON ƒë·∫ßu ti√™n trong text."""
    match = re.search(r"\{.*?\}", text, re.DOTALL)
    if match:
        return match.group(0)
    raise ValueError("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong ph·∫£n h·ªìi.")


async def suggest_product(
    suggest_type: str,
    suggest_product_target: list[str],
    recent_messages: str,
):
    target_list = "\n".join(f"- {t}" for t in suggest_product_target)

    schema_text = load_schema("products_module")
    # üëâ L√†m s·∫°ch m·ªôt ch√∫t cho GPT d·ªÖ hi·ªÉu h∆°n
    cleaned_schema = "\n".join([
        line for line in schema_text.splitlines()
        if line.strip() and not line.strip().startswith(tuple("0123456789"))  # b·ªè s·ªë th·ª© t·ª± 25. 26. 27.
    ])
    prompt = f"""
        You are a smart assistant that helps generate SQL queries to retrieve medical product information from the database.

        üíæ Database schema:
        {cleaned_schema}

        Context:
        - User‚Äôs product suggestion targets:
        {target_list}

        - Recent chat messages between user and assistant:
        {recent_messages}

        Your task:
        üëâ Based on the above context, generate a JSON object with:
        1. "natural_text": a short friendly Vietnamese sentence that introduces the result to the user
        2. "sql_query": an appropriate SQL query to fetch product data

        SQL requirements:
        - Query only from either `products` or `medicines` table
        - Select: product_id, name, price, stock, description
        - Use reasonable WHERE conditions (e.g., match name, description, or category)
        - Always include `LIMIT 5`

        - Always use `AS` to rename columns with Vietnamese display names:
            product_id AS 'M√£ s·∫£n ph·∫©m',
            name AS 'T√™n s·∫£n ph·∫©m',
            price AS 'Gi√°',
            stock AS 'S·ªë l∆∞·ª£ng',
            description AS 'M√¥ t·∫£'

        üîç SQL matching guidance:
        - Expand each product target into 2‚Äì4 short Vietnamese keywords commonly found in product descriptions.
        - Use keywords that are distinctive and avoid overly generic ones.

        ‚Üí Good examples:
        - "D∆∞·ª°ng ·∫©m da" ‚Üí d∆∞·ª°ng ·∫©m, gi·ªØ ·∫©m, da kh√¥, kem d∆∞·ª°ng
        - "Ng·ªß ngon h∆°n" ‚Üí ng·ªß ngon, d·ªÖ ng·ªß, th∆∞ gi√£n, gi·∫•c ng·ªß
        - "Gi·∫£m ƒëau h·ªçng" ‚Üí ƒëau h·ªçng, r√°t h·ªçng, d·ªãu c·ªï h·ªçng

        ‚ö†Ô∏è Filtering rules:
        - Avoid selecting unrelated products (e.g., thu·ªëc c·∫£m, s·ªët, vi√™m) unless directly relevant
        - Only include items where name or description clearly matches at least one keyword
        - DO NOT include generic fever or flu meds unless context clearly matches

        üìå Format WHERE clause like:
            WHERE LOWER(name) LIKE '%keyword1%' OR LOWER(description) LIKE '%keyword1%' OR ...


        Return JSON exactly in the following structure, but generate your own content:

        ```json
        {{
             "natural_text": "üì¶ ...",
             "sql_query": "SELECT ... FROM products WHERE ... LIMIT 5"
        }}
 
    ‚ö†Ô∏è Do not explain anything. Only return valid JSON in the above format.
    """.strip()

    try:
        response = chat_completion(
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI sinh c√¢u l·ªánh SQL t·ª´ y√™u c·∫ßu ng∆∞·ªùi d√πng."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=500,
        )

        raw_text = response.choices[0].message.content 
        json_text = extract_json(raw_text)
        return json.loads(json_text)

    except Exception as e:
        logger.warning("‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi GPT: %s", str(e))
        return {
            "natural_text": "M√¨nh ch∆∞a x√°c ƒë·ªãnh ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p l√∫c n√†y.",
            "sql_query": None
        }
    
