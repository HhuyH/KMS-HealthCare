import json
import pymysql
from datetime import date
import logging
import re
logger = logging.getLogger(__name__)
from config.config import DB_CONFIG
from utils.openai_client import chat_completion
from utils.symptom_utils import get_symptom_list, extract_symptoms_gpt, generate_related_symptom_question, save_symptoms_to_db
from utils.symptom_session import get_symptoms_from_session, save_symptoms_to_session
from utils.session_store import get_followed_up_symptom_ids, mark_followup_asked
from prompts.prompts import build_diagnosis_controller_prompt

async def gpt_health_talk(user_message: str, stored_symptoms: list[dict], recent_messages: list[str], session_key=None, user_id=None, chat_id=None) -> dict:
    # 1. Tr√≠ch tri·ªáu ch·ª©ng m·ªõi t·ª´ message
    new_symptoms, _ = extract_symptoms_gpt(user_message, session_key=session_key)
    if new_symptoms:
        stored_symptoms += new_symptoms
        stored_symptoms = save_symptoms_to_session(session_key, stored_symptoms)

        logger.info(f"[üìù] Tri·ªáu ch·ª©ng m·ªõi l∆∞u v√†o session {session_key}: {[s['name'] for s in new_symptoms]}")

    # 2. GPT quy·∫øt ƒë·ªãnh h√†nh vi
    controller = await decide_health_action(user_message, [s['name'] for s in stored_symptoms], recent_messages)

    if controller.get("trigger_diagnosis"):
        logger.info("‚ö° GPT x√°c ƒë·ªãnh ƒë·ªß ƒëi·ªÅu ki·ªán ch·∫©n ƒëo√°n")
        diseases = predict_disease_based_on_symptoms(stored_symptoms)

        if diseases:
            logger.info(f"‚úÖ GPT ƒë√£ d·ª± ƒëo√°n {len(diseases)} b·ªánh: {[d['name'] for d in diseases]}")

            if user_id:
                # üíæ L∆∞u tri·ªáu ch·ª©ng v√†o l·ªãch s·ª≠ ng∆∞·ªùi d√πng (ngo√†i l∆∞u d·ª± ƒëo√°n)
                note = generate_symptom_note(recent_messages)

                save_symptoms_to_db(user_id, stored_symptoms, note=note)


                # üíæ L∆∞u k·∫øt qu·∫£ ch·∫©n ƒëo√°n
                save_prediction_to_db(user_id, stored_symptoms, diseases, chat_id)

            diagnosis_text = generate_diagnosis_summary(diseases)

            return {
                "symptoms": new_symptoms,
                "followup_question": None,
                "trigger_diagnosis": True,
                "diagnosis_summary": diagnosis_text,
                "message": diagnosis_text,
                "end": controller.get("end", False)
            }

    # 3. N·∫øu c√≤n tri·ªáu ch·ª©ng ch∆∞a follow-up
    if controller.get("ask_followup", True):

        # N·∫øu ƒë√£ h·ªèi tri·ªáu ch·ª©ng li√™n quan tr∆∞·ªõc ƒë√≥ v√† ng∆∞·ªùi d√πng v·ª´a ph·ªß ƒë·ªãnh r√µ r√†ng ‚Üí kh√¥ng h·ªèi g√¨ n·ªØa, k·∫øt lu·∫≠n nh·∫π
        if is_user_response_negative_or_uncertain(user_message):
            summary = generate_light_diagnosis_message(stored_symptoms)
            return {
                "symptoms": [],
                "followup_question": None,
                "trigger_diagnosis": True,
                "diagnosis_summary": summary,
                "message": summary,
                "end": True
            }

        followup, targets = await generate_friendly_followup_question(
            stored_symptoms, session_key, recent_messages, return_with_targets=True
        )

        if not targets:
            # üîÅ N·∫øu follow-up h·∫øt ‚Üí h·ªèi th√™m tri·ªáu ch·ª©ng li√™n quan
            symptom_ids = [s["id"] for s in stored_symptoms]
            related = get_related_symptoms_by_disease(symptom_ids)

            print(f"[DEBUG] Tri·ªáu ch·ª©ng ƒë√£ c√≥: {symptom_ids}")
            # print(f"[DEBUG] G·ª£i √Ω li√™n quan t·ª´ DB: {related}")

            if related:
                related_names = [s["name"] for s in related][:4]
                followup_related = await generate_related_symptom_question(related_names)
                return {
                    "symptoms": [],
                    "followup_question": followup_related,
                    "trigger_diagnosis": False,
                    "diagnosis_summary": None,
                    "message": followup_related,
                    "end": False
                }

        # ‚úÖ N·∫øu v·∫´n c√≤n c√¢u h·ªèi follow-up h·ª£p l·ªá
        return {
            "symptoms": new_symptoms,
            "followup_question": followup,
            "trigger_diagnosis": False,
            "diagnosis_summary": None,
            "message": followup,
            "end": controller.get("end", False)
        }

    # 4. N·∫øu user tr·∫£ l·ªùi m∆° h·ªì ‚Üí G·ª£i √Ω tri·ªáu ch·ª©ng li√™n quan
    is_vague = gpt_looks_like_symptom_followup_uncertain(user_message)
    if is_vague:
        symptom_ids = [s["id"] for s in stored_symptoms]
        related = get_related_symptoms_by_disease(symptom_ids)

        # ƒê√£ t·ª´ng h·ªèi r·ªìi m√† user ti·∫øp t·ª•c m∆° h·ªì ho·∫∑c ph·ªß ƒë·ªãnh ‚Üí k·∫øt lu·∫≠n
        if is_user_response_negative_or_uncertain(user_message):
            logger.info(f"[‚ö†Ô∏è] Ph√°t hi·ªán ph·∫£n h·ªìi ph·ªß ƒë·ªãnh ho·∫∑c kh√¥ng r√µ: '{user_message}' ‚Üí K·∫øt lu·∫≠n nh·∫π.")
            # T·ª± ƒë·ªông k·∫øt lu·∫≠n nh·∫π
            summary = generate_light_diagnosis_message(stored_symptoms)

            # üíæ L∆∞u tri·ªáu ch·ª©ng v√†o l·ªãch s·ª≠ ng∆∞·ªùi d√πng
            note = generate_symptom_note(recent_messages)

            save_symptoms_to_db(user_id, stored_symptoms, note=note)
            return {
                "symptoms": [],
                "followup_question": None,
                "trigger_diagnosis": True,
                "diagnosis_summary": summary,
                "message": summary,
                "end": True
            }

    # 5. Fallback n·∫øu ch·∫≥ng c√≤n g√¨ ƒë·ªÉ h·ªèi
    return {
        "symptoms": new_symptoms,
        "followup_question": None,
        "trigger_diagnosis": False,
        "diagnosis_summary": None,
        "message": controller.get("message", "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m ƒë·ªÉ m√¨nh hi·ªÉu r√µ h∆°n nh√©?"),
        "end": controller.get("end", False)
    }



def is_user_response_negative_or_uncertain(text: str) -> bool:
    """
    Ki·ªÉm tra xem ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng c√≥ mang t√≠nh ph·ªß ƒë·ªãnh ho·∫∑c m∆° h·ªì hay kh√¥ng.
    Bao g·ªìm c√°c bi·ªÉu th·ª©c ph·ªï bi·∫øn b·∫±ng ti·∫øng Vi·ªát v√† ti·∫øng Anh.
    """

    text = text.lower().strip()

    # C√°c c·ª•m t·ª´ ph·ªß ƒë·ªãnh ho·∫∑c kh√¥ng ch·∫Øc ch·∫Øn ph·ªï bi·∫øn
    patterns = [
        r"\bkh√¥ng\b", r"\bkh√¥ng c√≥\b", r"\bko\b", r"\bk c√≥\b", r"\bko c√≥\b", r"\bko co\b",
        r"\bk r√µ\b", r"\bkh√¥ng r√µ\b", r"\bkh√¥ng ch·∫Øc\b", r"\bkh√¥ng bi·∫øt\b", r"\bk bi·∫øt\b",
        r"\bm√¨nh kh√¥ng r√µ\b", r"\bch∆∞a bi·∫øt\b", r"\bk bik\b", r"\bk b√≠t\b", r"\bko ro\b",
        r"\bt√¥i kh√¥ng bi·∫øt\b", r"\bt√¥i kh√¥ng ch·∫Øc\b",
        # English equivalents
        r"\bno\b", r"\bnot sure\b", r"\bi don't know\b", r"\bi'm not sure\b", r"\bidk\b", r"\bno idea\b"
    ]

    for pattern in patterns:
        if re.search(pattern, text):
            return True

    return False


def generate_light_diagnosis_message(symptoms: list[dict]) -> str:
    names = [s['name'] for s in symptoms]
    symptom_text = ", ".join(names) if names else "m·ªôt v√†i tri·ªáu ch·ª©ng"

    prompt = f"""
        You are a kind and empathetic virtual health assistant.

        The user has shared some symptoms (e.g., {symptom_text}), but their responses to follow-up questions have been vague, uncertain, or negative.

        Your job is to write a short and natural **message in Vietnamese**, gently acknowledging the situation and offering simple care advice.

        Instructions:
        - Do NOT list specific diseases or try to diagnose.
        - Assume the situation is still unclear or mild.
        - Use a natural, conversational tone ‚Äî avoid sounding like a formal announcement.
        - You may start directly with something soft and empathetic, without saying ‚ÄúCh√†o b·∫°n‚Äù or ‚ÄúC·∫£m ∆°n b·∫°n‚Äù.
        - You can use friendly emojis (like üòå, üåø, üí¨) if it makes the message feel more human and reassuring ‚Äî but no more than 2.
        - Suggest light care actions (e.g., ngh·ªâ ng∆°i, u·ªëng n∆∞·ªõc ·∫•m) and remind the user to watch for any changes.
        - Recommend seeing a doctor if symptoms persist or get worse.
        - Do NOT repeat the full list of symptoms; refer to them generally (e.g., "v√†i tri·ªáu ch·ª©ng b·∫°n ƒë√£ n√≥i").
        - End with a soft and comforting sentence like ‚ÄúB·∫°n c·ª© y√™n t√¢m theo d√µi th√™m nha.‚Äù or similar.
        - Do NOT use Markdown, JSON, or medical jargon.

        Output: Your entire message must be in Vietnamese only.
        """.strip()

    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.4, max_tokens=150)

        return response.choices[0].message.content.strip()
    except Exception:
        return "C√≥ th·ªÉ ƒë√¢y ch·ªâ l√† t√¨nh tr·∫°ng nh·∫π th√¥i, b·∫°n c·ª© ngh·ªâ ng∆°i v√† theo d√µi th√™m nh√©. N·∫øu kh√¥ng ƒë·ª° th√¨ n√™n ƒëi kh√°m cho y√™n t√¢m nha."


# h√†m t·∫°o ghi ch√∫ cho tri·ªáu ch·ª©ng khi th√™m v√†o database
def generate_symptom_note(recent_messages: list[str]) -> str:
    if not recent_messages:
        return "Ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ m·ªôt s·ªë tri·ªáu ch·ª©ng trong cu·ªôc tr√≤ chuy·ªán."

    context = "\n".join(f"- {msg}" for msg in recent_messages[-5:])

    prompt = f"""
        You are a helpful AI assistant supporting medical documentation.

        Below is a recent conversation with a user about their health concerns:

        {context}

        Write a short **symptom note** in **Vietnamese**, summarizing the user's main symptom(s) and any relevant context (e.g., when it started, what triggered it, how it felt).

        Instructions:
        - Your note must be in Vietnamese.
        - Keep it short (1‚Äì2 sentences).
        - Use natural, friendly, easy-to-understand language.
        - Do not use medical jargon.
        - Do not invent symptoms that were not clearly mentioned.
        - If the user was vague, still reflect that (e.g., ‚Äúng∆∞·ªùi d√πng kh√¥ng r√µ nguy√™n nh√¢n‚Äù).

        Your output must be only the note. Do not include any explanation or format it as JSON.
    """.strip()

    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.3, max_tokens=100)

        return response.choices[0].message.content.strip()
    except Exception:
        return "Ng∆∞·ªùi d√πng ƒë√£ m√¥ t·∫£ m·ªôt s·ªë tri·ªáu ch·ª©ng trong cu·ªôc tr√≤ chuy·ªán."

# D·ª± ƒëo√°n b·ªánh d·ª±a tr√™n list tri·ªáu ch·ª©ng
# Tr·∫£ v·ªÅ danh s√°ch c√°c b·ªánh v·ªõi ƒë·ªô ph√π h·ª£p (confidence 0-1) danh s√°ch b·ªánh g·ªìm: id, t√™n, ƒë·ªô ph√π h·ª£p, m√¥ t·∫£, h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã.
def predict_disease_based_on_symptoms(symptoms: list[dict]) -> list[dict]:
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            symptom_ids = [s['id'] for s in symptoms]
            if not symptom_ids:
                return []

            format_strings = ','.join(['%s'] * len(symptom_ids))

            cursor.execute(f"""
                SELECT 
                    ds.disease_id,
                    d.name,
                    d.description,
                    d.treatment_guidelines,
                    COUNT(*) AS match_count
                FROM disease_symptoms ds
                JOIN diseases d ON ds.disease_id = d.disease_id
                WHERE ds.symptom_id IN ({format_strings})
                GROUP BY ds.disease_id
                ORDER BY match_count DESC
            """, symptom_ids)

            results = cursor.fetchall()
            if not results:
                return []

            max_match = results[0][4]  # match_count cao nh·∫•t
            predicted = []
            for disease_id, name, desc, guideline, match_count in results:
                confidence = round(match_count / max_match, 2)
                predicted.append({
                    "disease_id": disease_id,
                    "name": name,
                    "description": desc or "",
                    "treatment_guidelines": guideline or "",
                    "confidence": confidence
                })

            return predicted
    finally:
        conn.close()

# l∆∞u ph·ªèng ƒëo√°n b·ªánh v√†o database l∆∞u v√†o health_records user_symptom_history khi ƒëang th·ª±c hi·ªán ch·∫©n ƒëo√°n k·∫øt qu·∫£
def save_prediction_to_db(user_id: int, symptoms: list[dict], diseases: list[dict], chat_id: int = None):
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            # Ghi nh·∫≠n health_records ƒë∆°n gi·∫£n v·ªõi notes m√¥ t·∫£ tri·ªáu ch·ª©ng
            note = "Tri·ªáu ch·ª©ng ghi nh·∫≠n: " + ", ".join([s['name'] for s in symptoms])
            record_date = date.today()

            cursor.execute("""
                INSERT INTO health_records (user_id, record_date, notes)
                VALUES (%s, %s, %s)
            """, (user_id, record_date, note))
            record_id = cursor.lastrowid

            # Ghi v√†o b·∫£ng health_predictions
            confidence_score = max([d["confidence"] for d in diseases], default=0.0)
            prediction_details = {
                "symptoms": [s['name'] for s in symptoms],
                "summary": "AI predicted diseases based on reported symptoms"
            }

            cursor.execute("""
                INSERT INTO health_predictions (user_id, record_id, chat_id, confidence_score, details)
                VALUES (%s, %s, %s, %s, %s)
            """, (user_id, record_id, chat_id, confidence_score, json.dumps(prediction_details)))
            prediction_id = cursor.lastrowid

            # Ghi t·ª´ng b·ªánh d·ª± ƒëo√°n v√†o b·∫£ng prediction_diseases
            for d in diseases:
                cursor.execute("""
                    INSERT INTO prediction_diseases (prediction_id, disease_id, confidence)
                    VALUES (%s, %s, %s)
                """, (prediction_id, d["disease_id"], d["confidence"]))

        conn.commit()
    finally:
        conn.close()

# T·∫°o ƒëo·∫°n vƒÉn t∆∞ v·∫•n t·ª´ danh s√°ch b·ªánh, bao g·ªìm m√¥ t·∫£ ng·∫Øn v√† g·ª£i √Ω chƒÉm s√≥c.
def generate_diagnosis_summary(diseases: list[dict]) -> str:
    if not diseases:
        return "M√¨nh ch∆∞a c√≥ ƒë·ªß th√¥ng tin ƒë·ªÉ ƒë∆∞a ra ch·∫©n ƒëo√°n. B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m tri·ªáu ch·ª©ng nh√©."

    lines = ["D·ª±a tr√™n nh·ªØng g√¨ b·∫°n chia s·∫ª, ƒë√¢y l√† m·ªôt s·ªë t√¨nh tr·∫°ng c√≥ th·ªÉ li√™n quan. B·∫°n c√≥ th·ªÉ theo d√µi nh∆∞ sau:\n"]

    # T√¨m c√°c b·ªánh thi·∫øu th√¥ng tin
    missing_info_names = [d["name"] for d in diseases[:3] if not d.get("description") or not d.get("treatment_guidelines")]
    info_map = {}

    if missing_info_names:
        conn = pymysql.connect(**DB_CONFIG)
        try:
            with conn.cursor() as cursor:
                format_strings = ','.join(['%s'] * len(missing_info_names))
                cursor.execute(f"""
                    SELECT name, description, treatment_guidelines
                    FROM diseases
                    WHERE name IN ({format_strings})
                """, missing_info_names)
                for name, desc, care in cursor.fetchall():
                    info_map[name] = {
                        "description": desc or "",
                        "treatment_guidelines": care or ""
                    }
        finally:
            conn.close()

    for d in diseases[:3]:
        name = d.get("name", "Kh√¥ng x√°c ƒë·ªãnh")
        desc = (d.get("description") or "").strip()
        care = (d.get("treatment_guidelines") or "").strip()
        confidence = d.get("confidence", 0.0)

        # B·ªï sung t·ª´ DB n·∫øu thi·∫øu
        if (not desc or not care) and name in info_map:
            if not desc:
                desc = info_map[name]["description"]
            if not care:
                care = info_map[name]["treatment_guidelines"]

        warning = " ‚ö†Ô∏è C·∫ßn l∆∞u √Ω" if confidence >= 0.9 else ""
        lines.append(f"- **{name}** (ƒê·ªô ph√π h·ª£p: {int(confidence * 100)}%){warning}")
        lines.append(f"   ‚Ä¢ M√¥ t·∫£ s∆° l∆∞·ª£c: {desc[:100]}..." if desc else "   ‚Ä¢ Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt v·ªÅ b·ªánh n√†y.")
        lines.append(f"   ‚Ä¢ G·ª£i √Ω chƒÉm s√≥c: {care[:100]}..." if care else "   ‚Ä¢ Hi·ªán ch∆∞a c√≥ h∆∞·ªõng d·∫´n chƒÉm s√≥c c·ª• th·ªÉ.")
        lines.append("")  # kho·∫£ng c√°ch

    lines.append("üëâ N·∫øu b·∫°n c·∫£m th·∫•y kh√¥ng ·ªïn ho·∫∑c tri·ªáu ch·ª©ng k√©o d√†i, h√£y c√¢n nh·∫Øc ƒë·∫øn g·∫∑p b√°c sƒ© ƒë·ªÉ ki·ªÉm tra k·ªπ h∆°n.")
    return "\n".join(lines)

# T·∫°o c√¢u h·ªèi ti·∫øp theo nh·∫π nh√†ng, th√¢n thi·ªán, g·ª£i √Ω ng∆∞·ªùi d√πng chia s·∫ª th√™m th√¥ng tin d·ª±a tr√™n c√°c tri·ªáu ch·ª©ng ƒë√£ ghi nh·∫≠n.
def join_symptom_names_vietnamese(names: list[str]) -> str:
    if not names:
        return ""
    if len(names) == 1:
        return names[0]
    if len(names) == 2:
        return f"{names[0]} v√† {names[1]}"
    return f"{', '.join(names[:-1])} v√† {names[-1]}"

FOLLOWUP_KEY = "followup_asked"

# ‚úÖ generate_friendly_followup_question tr·∫£ v·ªÅ c·∫£ c√¢u h·ªèi + danh s√°ch tri·ªáu ch·ª©ng ch∆∞a h·ªèi follow-up
async def generate_friendly_followup_question(
    symptoms: list[dict], 
    session_key: str = None, 
    recent_messages: list[str] = [],
    return_with_targets: bool = False
) -> str | tuple[str, list[dict]]:
    if not symptoms:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m n·∫øu c√≤n tri·ªáu ch·ª©ng n√†o kh√°c b·∫°n ƒëang g·∫∑p ph·∫£i nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

    # üìå B1: Load c√°c tri·ªáu ch·ª©ng ƒë√£ h·ªèi follow-up t·ª´ session
    already_asked = set()
    if session_key:
        already_asked = set(await get_followed_up_symptom_ids(session_key))

    # üìå B2: L·ªçc tri·ªáu ch·ª©ng ch∆∞a h·ªèi
    symptoms_to_ask = [s for s in symptoms if s['id'] not in already_asked]
    if not symptoms_to_ask:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m n·∫øu c√≤n tri·ªáu ch·ª©ng n√†o kh√°c b·∫°n ƒëang g·∫∑p ph·∫£i nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

    # üìå B3: Truy DB l·∫•y follow-up question
    symptom_ids_to_ask = [s['id'] for s in symptoms_to_ask]
    conn = pymysql.connect(**DB_CONFIG)
    try:
        with conn.cursor() as cursor:
            format_strings = ','.join(['%s'] * len(symptom_ids_to_ask))
            cursor.execute(f"""
                SELECT name, followup_question, symptom_id
                FROM symptoms
                WHERE symptom_id IN ({format_strings})
            """, symptom_ids_to_ask)
            results = cursor.fetchall()
    finally:
        conn.close()

    names, questions, just_asked_ids = [], [], []
    for name, question, sid in results:
        if question:
            names.append(name)
            questions.append(question.strip())
            just_asked_ids.append(sid)

    if not questions:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m n·∫øu c√≤n tri·ªáu ch·ª©ng n√†o kh√°c b·∫°n ƒëang g·∫∑p ph·∫£i nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

    context = "\n".join(f"- {msg}" for msg in recent_messages[-3:]) if recent_messages else "(no prior messages)"

    gpt_prompt = f"""
    You are a warm and understanding doctor. Below is the recent conversation with the patient:
    {context}

    The patient has shared the following symptoms: {', '.join(names)}.

    Here are the follow-up questions you'd normally ask:
    {chr(10).join([f"- {n}: {q}" for n, q in zip(names, questions)])}

    Now write a single, fluent, caring message in Vietnamese to gently follow up with the patient.

    Instructions:
    - Combine all follow-up questions into one natural Vietnamese message.
    - Connect questions smoothly. If symptoms are related, group them in one paragraph.
    - Vary transitions. You may use phrases like "B√™n c·∫°nh ƒë√≥", "M·ªôt ƒëi·ªÅu n·ªØa", or "Th√™m v√†o ƒë√≥", but each only once.
    - Do not ask about any additional or related symptoms in this message.
    - Avoid repeating sentence structure. Keep it soft, natural, and human.
    - No greetings or thank yous ‚Äî continue mid-conversation.
    - If the user has already described the symptom clearly (e.g., "s√°ng nay", "l√∫c ƒë√≥", "v·ª´a ng·ªß d·∫≠y"), treat that as valid context and avoid repeating.
    - If the last message already asked about these symptoms, **do not repeat the exact same list**. Rephrase or follow up differently (e.g., ask about timing, severity, or impact on daily life).
    - If you're unsure what else to ask, it's okay to acknowledge what the user has said and invite them to share more freely.

    Your response must be in Vietnamese.
    """.strip()


    try:
        response = chat_completion([
            {"role": "user", "content": gpt_prompt}
        ], temperature=0.4, max_tokens=200)

        reply = response.choices[0].message.content.strip()
        if session_key and just_asked_ids and reply:
            await mark_followup_asked(session_key, just_asked_ids)

        return (reply, symptoms_to_ask) if return_with_targets else reply

    except Exception:
        default_reply = "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m ƒë·ªÉ m√¨nh h·ªó tr·ª£ t·ªët h∆°n nh√©?"
        return (default_reply, []) if return_with_targets else default_reply

# D·ª±a v√†o c√°c symptom_id hi·ªán c√≥ truy b·∫£ng disease_symptoms ‚Üí l·∫•y danh s√°ch c√°c disease_id c√≥ li√™n quan truy ng∆∞·ª£c l·∫°i ‚Üí l·∫•y th√™m c√°c symptom kh√°c thu·ªôc c√πng b·ªánh (tr·ª´ c√°i ƒë√£ c√≥)
def get_related_symptoms_by_disease(symptom_ids: list[int]) -> list[dict]:
    if not symptom_ids:
        return []

    conn = pymysql.connect(**DB_CONFIG)
    related_symptoms = []

    try:
        with conn.cursor() as cursor:
            # B1: L·∫•y c√°c disease_id li√™n quan t·ªõi c√°c symptom hi·ªán t·∫°i
            format_strings = ','.join(['%s'] * len(symptom_ids))
            cursor.execute(f"""
                SELECT DISTINCT disease_id
                FROM disease_symptoms
                WHERE symptom_id IN ({format_strings})
            """, tuple(symptom_ids))
            disease_ids = [row[0] for row in cursor.fetchall()]

            if not disease_ids:
                return []

            # B2: L·∫•y c√°c symptom_id kh√°c c√πng thu·ªôc c√°c disease ƒë√≥
            format_diseases = ','.join(['%s'] * len(disease_ids))
            cursor.execute(f"""
                SELECT DISTINCT s.symptom_id, s.name
                FROM disease_symptoms ds
                JOIN symptoms s ON ds.symptom_id = s.symptom_id
                WHERE ds.disease_id IN ({format_diseases})
                  AND ds.symptom_id NOT IN ({format_strings})
            """, tuple(disease_ids + symptom_ids))

            related_symptoms = [{"id": row[0], "name": row[1]} for row in cursor.fetchall()]

    finally:
        conn.close()

    return related_symptoms

async def decide_health_action(user_message: str, symptom_names: list[str], recent_messages: list[str]) -> dict:
    prompt = build_diagnosis_controller_prompt(symptom_names, recent_messages)

    try:
        response = chat_completion([
            {"role": "user", "content": prompt}
        ], temperature=0.3, max_tokens=400)

        content = response.choices[0].message.content.strip()

        # Clean n·∫øu GPT b·ªçc trong ```json
        if content.startswith("```json"):
            content = content.replace("```json", "").replace("```", "").strip()

        # X·ª≠ l√Ω fallback n·∫øu kh√¥ng ph·∫£i JSON
        try:
            parsed = json.loads(content)
        except json.JSONDecodeError as je:
            logger.error(f"[‚ùå] JSON decode l·ªói: {je} | N·ªôi dung: {content}")
            return {
                "trigger_diagnosis": False,
                "diagnosis_text": None,
                "message": "B·∫°n c√≥ th·ªÉ m√¥ t·∫£ th√™m ƒë·ªÉ m√¨nh hi·ªÉu r√µ h∆°n nh√©?",
                "end": False
            }

        return {
            "trigger_diagnosis": parsed.get("trigger_diagnosis", False),
            "diagnosis_text": parsed.get("diagnosis_text"),
            "message": parsed.get("message"),
            "end": parsed.get("trigger_diagnosis", False)
        }

    except Exception as e:
        logger.error(f"[‚ùå] L·ªói h·ªá th·ªëng trong decide_health_action: {e}")
        return {
            "trigger_diagnosis": False,
            "diagnosis_text": None,
            "message": "B·∫°n c√≥ th·ªÉ chia s·∫ª th√™m ƒë·ªÉ m√¨nh hi·ªÉu r√µ h∆°n nh√©?",
            "end": False
        }

def gpt_looks_like_symptom_followup_uncertain(text: str) -> bool:
    prompt = f""" 
        You are an AI assistant that determines whether the following message from a user in a health-related conversation sounds like a vague or uncertain follow-up to previous symptom discussion.

        Message: "{text}"

        These replies may contain vague expressions, indirect timing, unclear feelings, or conversational hesitation ‚Äî often seen in real user input. 

        Examples of vague/uncertain replies:
        - "kh√¥ng ch·∫Øc", "c√≥ th·ªÉ", "t√¥i kh√¥ng bi·∫øt", "v·∫´n ch∆∞a r√µ", "can't tell", "m·ªôt ch√∫t", "kind of", "ch·∫Øc l√† v·∫≠y", "kh√¥ng r√µ l·∫Øm", "th·ªânh tho·∫£ng", "ƒë√¥i khi b·ªã", "h∆°i h∆°i", "c≈©ng kh√¥ng bi·∫øt n·ªØa", "kh√≥ n√≥i l·∫Øm"
        - "v·ª´a ng·ªß d·∫≠y", "s√°ng nay", "l√∫c ƒë√≥", "sau khi ƒÉn", "xong th√¨ th·∫•y m·ªát", "ƒëang n·∫±m th√¨ b·ªã", "ƒëi ngo√†i xong b·ªã", "v·ª´a ƒë·ª©ng l√™n", "l√∫c ƒë·ª©ng d·∫≠y", "trong l√∫c ·∫•y", "sau khi u·ªëng n∆∞·ªõc", "khi ƒëang t·∫≠p", "v·ª´a m·ªõi...", "xong r·ªìi th√¨..."
        - "th·∫•y ng∆∞·ªùi l·∫° l·∫°", "kh√≥ t·∫£ l·∫Øm", "kh√¥ng gi·ªëng m·ªçi khi", "c·∫£m th·∫•y h∆°i l·∫°", "c·∫£m gi√°c kh√¥ng quen", "m·ªát ki·ªÉu kh√°c", "ƒë·∫ßu √≥c kh√¥ng t·ªânh t√°o l·∫Øm", "c·∫£m th·∫•y h∆°i kh√≥ ch·ªãu", "ƒëang n·∫±m th√¨ th·∫•y..."

        Is this message an uncertain continuation of a prior symptom conversation ‚Äî meaning the user might still be talking about symptoms but isn't describing clearly?

        Answer only YES or NO.
    """ 

    response = chat_completion([
        {"role": "user", "content": prompt}
    ], temperature=0.0, max_tokens=5)

    answer = response.choices[0].message.content.strip().lower()
    return "yes" in answer

# Ki·ªÉm tra xem c√¢u ti·∫øp theo c√≥ b·ªï sung cho tri√™u ch·ª©ng ko
def looks_like_followup_with_gpt(text: str, context: str = "") -> bool:
    prompt = f""" 
        You are an AI assistant that helps identify intent in health care conversations.

        Here is the previous context:
        "{context}"

        The user has now said:
        "{text}"

        Is this a continuation of the prior health-related context ‚Äî such as adding more symptoms, describing progression, or providing clarification?

        Answer only YES or NO.
    """ 

    response = chat_completion([
        {"role": "system", "content": "B·∫°n l√† AI ph√¢n t√≠ch h·ªôi tho·∫°i."},
        {"role": "user", "content": prompt}
    ], temperature=0.0, max_tokens=5)

    answer = response.choices[0].message.content.strip().lower()
    return "yes" in answer
